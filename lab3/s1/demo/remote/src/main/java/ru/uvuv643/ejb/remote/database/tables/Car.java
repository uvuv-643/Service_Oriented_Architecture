/*
 * This file is generated by jOOQ.
 */
package ru.uvuv643.ejb.remote.database.tables;


import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import ru.uvuv643.ejb.remote.database.Keys;
import ru.uvuv643.ejb.remote.database.Public;
import ru.uvuv643.ejb.remote.database.tables.records.CarRecord;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Car extends TableImpl<CarRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.car</code>
     */
    public static final Car CAR = new Car();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CarRecord> getRecordType() {
        return CarRecord.class;
    }

    /**
     * The column <code>public.car.id</code>.
     */
    public final TableField<CarRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.car.cool</code>.
     */
    public final TableField<CarRecord, Boolean> COOL = createField(DSL.name("cool"), SQLDataType.BOOLEAN, this, "");

    private Car(Name alias, Table<CarRecord> aliased) {
        this(alias, aliased, null);
    }

    private Car(Name alias, Table<CarRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.car</code> table reference
     */
    public Car(String alias) {
        this(DSL.name(alias), CAR);
    }

    /**
     * Create an aliased <code>public.car</code> table reference
     */
    public Car(Name alias) {
        this(alias, CAR);
    }

    /**
     * Create a <code>public.car</code> table reference
     */
    public Car() {
        this(DSL.name("car"), null);
    }

    public <O extends Record> Car(Table<O> child, ForeignKey<O, CarRecord> key) {
        super(child, key, CAR);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<CarRecord, Integer> getIdentity() {
        return (Identity<CarRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CarRecord> getPrimaryKey() {
        return Keys.CAR_PKEY;
    }

    @Override
    public List<UniqueKey<CarRecord>> getKeys() {
        return Arrays.<UniqueKey<CarRecord>>asList(Keys.CAR_PKEY);
    }

    @Override
    public Car as(String alias) {
        return new Car(DSL.name(alias), this);
    }

    @Override
    public Car as(Name alias) {
        return new Car(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Car rename(String name) {
        return new Car(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Car rename(Name name) {
        return new Car(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Boolean> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
