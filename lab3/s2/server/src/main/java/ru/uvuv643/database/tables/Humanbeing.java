/*
 * This file is generated by jOOQ.
 */
package ru.uvuv643.database.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.uvuv643.database.Keys;
import ru.uvuv643.database.Public;
import ru.uvuv643.database.enums.Mood;
import ru.uvuv643.database.enums.WeaponType;
import ru.uvuv643.database.tables.records.HumanbeingRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Humanbeing extends TableImpl<HumanbeingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.humanbeing</code>
     */
    public static final Humanbeing HUMANBEING = new Humanbeing();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HumanbeingRecord> getRecordType() {
        return HumanbeingRecord.class;
    }

    /**
     * The column <code>public.humanbeing.id</code>.
     */
    public final TableField<HumanbeingRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.humanbeing.name</code>.
     */
    public final TableField<HumanbeingRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.humanbeing.coordinates_id</code>.
     */
    public final TableField<HumanbeingRecord, Integer> COORDINATES_ID = createField(DSL.name("coordinates_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.humanbeing.creationdate</code>.
     */
    public final TableField<HumanbeingRecord, LocalDate> CREATIONDATE = createField(DSL.name("creationdate"), SQLDataType.LOCALDATE.nullable(false).defaultValue(DSL.field("CURRENT_DATE", SQLDataType.LOCALDATE)), this, "");

    /**
     * The column <code>public.humanbeing.realhero</code>.
     */
    public final TableField<HumanbeingRecord, Boolean> REALHERO = createField(DSL.name("realhero"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.humanbeing.hastoothpick</code>.
     */
    public final TableField<HumanbeingRecord, Boolean> HASTOOTHPICK = createField(DSL.name("hastoothpick"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.humanbeing.impactspeed</code>.
     */
    public final TableField<HumanbeingRecord, Double> IMPACTSPEED = createField(DSL.name("impactspeed"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.humanbeing.minutesofwaiting</code>.
     */
    public final TableField<HumanbeingRecord, Double> MINUTESOFWAITING = createField(DSL.name("minutesofwaiting"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.humanbeing.weapontype</code>.
     */
    public final TableField<HumanbeingRecord, WeaponType> WEAPONTYPE = createField(DSL.name("weapontype"), SQLDataType.VARCHAR.asEnumDataType(ru.uvuv643.database.enums.WeaponType.class), this, "");

    /**
     * The column <code>public.humanbeing.mood</code>.
     */
    public final TableField<HumanbeingRecord, Mood> MOOD = createField(DSL.name("mood"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(ru.uvuv643.database.enums.Mood.class), this, "");

    /**
     * The column <code>public.humanbeing.car_id</code>.
     */
    public final TableField<HumanbeingRecord, Integer> CAR_ID = createField(DSL.name("car_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private Humanbeing(Name alias, Table<HumanbeingRecord> aliased) {
        this(alias, aliased, null);
    }

    private Humanbeing(Name alias, Table<HumanbeingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.humanbeing</code> table reference
     */
    public Humanbeing(String alias) {
        this(DSL.name(alias), HUMANBEING);
    }

    /**
     * Create an aliased <code>public.humanbeing</code> table reference
     */
    public Humanbeing(Name alias) {
        this(alias, HUMANBEING);
    }

    /**
     * Create a <code>public.humanbeing</code> table reference
     */
    public Humanbeing() {
        this(DSL.name("humanbeing"), null);
    }

    public <O extends Record> Humanbeing(Table<O> child, ForeignKey<O, HumanbeingRecord> key) {
        super(child, key, HUMANBEING);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<HumanbeingRecord, Long> getIdentity() {
        return (Identity<HumanbeingRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<HumanbeingRecord> getPrimaryKey() {
        return Keys.HUMANBEING_PKEY;
    }

    @Override
    public List<UniqueKey<HumanbeingRecord>> getKeys() {
        return Arrays.<UniqueKey<HumanbeingRecord>>asList(Keys.HUMANBEING_PKEY);
    }

    @Override
    public List<ForeignKey<HumanbeingRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<HumanbeingRecord, ?>>asList(Keys.HUMANBEING__HUMANBEING_COORDINATES_ID_FKEY, Keys.HUMANBEING__HUMANBEING_CAR_ID_FKEY);
    }

    private transient Coordinates _coordinates;
    private transient Car _car;

    public Coordinates coordinates() {
        if (_coordinates == null)
            _coordinates = new Coordinates(this, Keys.HUMANBEING__HUMANBEING_COORDINATES_ID_FKEY);

        return _coordinates;
    }

    public Car car() {
        if (_car == null)
            _car = new Car(this, Keys.HUMANBEING__HUMANBEING_CAR_ID_FKEY);

        return _car;
    }

    @Override
    public List<Check<HumanbeingRecord>> getChecks() {
        return Arrays.<Check<HumanbeingRecord>>asList(
              Internal.createCheck(this, DSL.name("humanbeing_id_check"), "((id > 0))", true)
            , Internal.createCheck(this, DSL.name("humanbeing_impactspeed_check"), "((impactspeed <= (676)::double precision))", true)
            , Internal.createCheck(this, DSL.name("humanbeing_name_check"), "(((name)::text <> ''::text))", true)
        );
    }

    @Override
    public Humanbeing as(String alias) {
        return new Humanbeing(DSL.name(alias), this);
    }

    @Override
    public Humanbeing as(Name alias) {
        return new Humanbeing(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Humanbeing rename(String name) {
        return new Humanbeing(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Humanbeing rename(Name name) {
        return new Humanbeing(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, String, Integer, LocalDate, Boolean, Boolean, Double, Double, WeaponType, Mood, Integer> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
