/*
 * This file is generated by jOOQ.
 */
package ru.uvuv643.ejb.remote.database.tables;


import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import ru.uvuv643.ejb.remote.database.Keys;
import ru.uvuv643.ejb.remote.database.Public;
import ru.uvuv643.ejb.remote.database.tables.records.CoordinatesRecord;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Coordinates extends TableImpl<CoordinatesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.coordinates</code>
     */
    public static final Coordinates COORDINATES = new Coordinates();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoordinatesRecord> getRecordType() {
        return CoordinatesRecord.class;
    }

    /**
     * The column <code>public.coordinates.id</code>.
     */
    public final TableField<CoordinatesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.coordinates.x</code>.
     */
    public final TableField<CoordinatesRecord, Integer> X = createField(DSL.name("x"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.coordinates.y</code>.
     */
    public final TableField<CoordinatesRecord, Long> Y = createField(DSL.name("y"), SQLDataType.BIGINT.nullable(false), this, "");

    private Coordinates(Name alias, Table<CoordinatesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Coordinates(Name alias, Table<CoordinatesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.coordinates</code> table reference
     */
    public Coordinates(String alias) {
        this(DSL.name(alias), COORDINATES);
    }

    /**
     * Create an aliased <code>public.coordinates</code> table reference
     */
    public Coordinates(Name alias) {
        this(alias, COORDINATES);
    }

    /**
     * Create a <code>public.coordinates</code> table reference
     */
    public Coordinates() {
        this(DSL.name("coordinates"), null);
    }

    public <O extends Record> Coordinates(Table<O> child, ForeignKey<O, CoordinatesRecord> key) {
        super(child, key, COORDINATES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<CoordinatesRecord, Integer> getIdentity() {
        return (Identity<CoordinatesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CoordinatesRecord> getPrimaryKey() {
        return Keys.COORDINATES_PKEY;
    }

    @Override
    public List<UniqueKey<CoordinatesRecord>> getKeys() {
        return Arrays.<UniqueKey<CoordinatesRecord>>asList(Keys.COORDINATES_PKEY);
    }

    @Override
    public List<Check<CoordinatesRecord>> getChecks() {
        return Arrays.<Check<CoordinatesRecord>>asList(
              Internal.createCheck(this, DSL.name("coordinates_x_check"), "((x <= 9))", true)
        );
    }

    @Override
    public Coordinates as(String alias) {
        return new Coordinates(DSL.name(alias), this);
    }

    @Override
    public Coordinates as(Name alias) {
        return new Coordinates(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Coordinates rename(String name) {
        return new Coordinates(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Coordinates rename(Name name) {
        return new Coordinates(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
