/*
 * This file is generated by jOOQ.
 */
package ru.uvuv643.database.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

import ru.uvuv643.database.tables.Coordinates;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoordinatesRecord extends UpdatableRecordImpl<CoordinatesRecord> implements Record3<Integer, Integer, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.coordinates.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.coordinates.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.coordinates.x</code>.
     */
    public void setX(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.coordinates.x</code>.
     */
    public Integer getX() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.coordinates.y</code>.
     */
    public void setY(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.coordinates.y</code>.
     */
    public Long getY() {
        return (Long) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, Integer, Long> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Coordinates.COORDINATES.ID;
    }

    @Override
    public Field<Integer> field2() {
        return Coordinates.COORDINATES.X;
    }

    @Override
    public Field<Long> field3() {
        return Coordinates.COORDINATES.Y;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getX();
    }

    @Override
    public Long component3() {
        return getY();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getX();
    }

    @Override
    public Long value3() {
        return getY();
    }

    @Override
    public CoordinatesRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public CoordinatesRecord value2(Integer value) {
        setX(value);
        return this;
    }

    @Override
    public CoordinatesRecord value3(Long value) {
        setY(value);
        return this;
    }

    @Override
    public CoordinatesRecord values(Integer value1, Integer value2, Long value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CoordinatesRecord
     */
    public CoordinatesRecord() {
        super(Coordinates.COORDINATES);
    }

    /**
     * Create a detached, initialised CoordinatesRecord
     */
    public CoordinatesRecord(Integer id, Integer x, Long y) {
        super(Coordinates.COORDINATES);

        setId(id);
        setX(x);
        setY(y);
    }
}
